#!/bin/bash
set -u; source "${LEUKOS_SH_V1}"; cd "${__root__}"

check_only="true"
if [[ ${1:-} == "-c" ]]; then
    check_only="true"
fi
if [[ ${1:-} == "-w" ]]; then
    check_only="false"
fi

function if_check {
    if [[ ${check_only} == "true" ]]; then
        echo "$@"
    else
        echo ""
    fi
}

function if_write {
    if [[ ${check_only} == "true" ]]; then
        echo ""
    else
        echo "$@"
    fi
}

failure=false

function do_lint {
    local label="${1}"
    local output
    set +e
    output=$($2)
    local exit_code=$?
    set -e

    if [[ ${exit_code} -eq 0 ]]; then
        OK "${label}"
    else
        failure=true
        NOT_OK "${label}"
        echo "${output}"
    fi
}

function _list-python-test-files-for-linting () {
    find ./be/tests -name "*.py" -print0
}

function _list-python-source-files-for-linting () {
    find ./be/src -name "*.py" -print0
    find ./dss/src -name "*.py" -print0
    for f in $(find ./ops/ -type f); do
        if head -1 ${f} | grep '#!/usr/bin/env python' > /dev/null; then
            echo -n ${f}
            echo -ne '\0'
        fi
    done
}

function _list-python-files-for-linting () {
    _list-python-source-files-for-linting
    _list-python-test-files-for-linting
}

function _isort() {
    _list-python-files-for-linting | xargs -0 isort $(if_check -c) 2>&1
}

do_lint "isort" _isort

function _black() {
    # NOTE due to how sub shell and exit codes work it is important
    # here to exit, with none zero, if the first call to black
    # fails. without thie first `|| exit 1` we will fail if the test
    # files fail. 20200519:mb
    _list-python-source-files-for-linting | xargs -0 black $(if_check --check) -t py37 2>&1 || exit 1
    _list-python-test-files-for-linting | xargs -0 black -l 120 $(if_check --check) -t py37 2>&1 || exit 1
}

do_lint "black" _black

function _flake8() {
    _list-python-files-for-linting | xargs -0 flake8 2>&1
}

if [[ $check_only == "true" ]]; then
    do_lint "flake8" _flake8
fi

function _eslint() {
    if [[ $check_only == "true" ]]; then
        (cd fe && ./node_modules/.bin/eslint --max-warnings 0 ./src/ 2>&1)
    else
        (cd fe && ./node_modules/.bin/eslint --fix ./src/ 2>&1)
    fi
}

do_lint "eslint" _eslint

if [[ ${check_only} == "true" ]]; then
    prettier_mode="--check"
else
    prettier_mode="--write"
fi

function _prettier_js {
    (find ./fe/src -name "*.js" -print0;
     find ./fe -maxdepth 1 -name "*.js" -print0
    ) | xargs -0 ./fe/node_modules/.bin/prettier --config "./fe/package.json" ${prettier_mode} 2>&1
}

do_lint "prettier js" _prettier_js

function _prettier_json {
    (find ./fe/src -name "*.json" -print0;
     find ./fe/public -name "*.json" -print0;
     find ./fe -maxdepth 1 -name "*.json" -print0
    )  | xargs -0 ./fe/node_modules/.bin/prettier --parser json --no-config ${prettier_mode} 2>&1
}

function _prettier_html() {
    (find ./fe/public -name "*.html" -print0;
    )  | xargs -0 ./fe/node_modules/.bin/prettier --parser html --no-config ${prettier_mode} 2>&1
}

do_lint "prettier html" _prettier_html

do_lint "prettier json" _prettier_json

function _prettier_yaml() {
    (find ./ -name "*.yaml" -print0
    ) | xargs -0 ./fe/node_modules/.bin/prettier --parser yaml --no-config ${prettier_mode} 2>&1
}

do_lint "prettier yaml" _prettier_yaml

if [[ ${failure} = true ]]; then
    exit 1
else
    exit 0
fi
